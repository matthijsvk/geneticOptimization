function [it,population,runTime]=myGAoriginal(f,V,M,lb,ub)
% myGA(f,V,M,lb,ub)
% f : function to minimize
% V : Dimension of the search space.
% sM : Number of objectives.
% lb = lower bound vector.
% ub = upper bound vector.

%% DEFINITION OF THE PARAMETERS

N = 32;         % Population size
NP = round(N/2);       % Size of the mating pool
NC = round(N);       % Number of children generated by generation
%NC = N;
P_start = 0.05;        % probability of recombination
M_start = 1 - P_start;
<<<<<<< Updated upstream
P_end = 0.8;
sd_mut_start = 1;  % standard deviation of Gaussian for mutation
sd_mut_end = 0.05;
intervalScalar = 1.2;   % scale the parent interval to create more variation 
                        % and not get stuck in local minimum because you always stay in between the parents

N= 16;    
P_end = 0.44;
sd_mut_end = 0.26;
NP = 9;
NC = 8;
intervalScalar = 1.35;
=======
% P_end = 0.8;
sd_mut_start = 0.04;  % standard deviation of Gaussian for mutation
% sd_mut_end = 0.05;
% intervalScalar = 1.2;   % scale the parent interval to create more variation 
%                         % and not get stuck in local minimum because you always stay in between the parents

N= 14;    
P_end = 0.44;
sd_mut_end = 0.01;
NP = 10;
NC = 9;
intervalScalar = 1.2;
>>>>>>> Stashed changes

%P=0.44 | sd_mut:  0.26 | N: 10.00 | NP:  9.00 | NC:  8.00 | interval:  1.35 

verbose=0;
%% GENETIC ALGORITHM

% Generation of the intial population
population=initPopulation(N,V,M);
population=evaluatePopulation(population,f,V,M,lb,ub);
<<<<<<< Updated upstream
population=sortPopulation(population,V,M);
=======

population=sortPopulation(population,V,M);
% disp('initialPopulation')
% disp(population)
>>>>>>> Stashed changes

% Main loop
startTime = cputime;

it=1;
stopFlag = 0;
crowdingDistanceFlag = 0;
while stopFlag==0
    
    % use this to enable/disable variable P and sd_mut.
    % Setting to crowdingDistanceFlag uses first variable, and when everything reached rank 1 fixed
<<<<<<< Updated upstream
    fixedPFlag = 1; %crowdingDistanceFlag;
=======
    fixedPFlag = 1;%crowdingDistanceFlag;
>>>>>>> Stashed changes
    if fixedPFlag == 0
        sd_mut = sd_mut_start/it + sd_mut_end;
        P = P_start/it + P_end;
    else
        P = P_end;
        sd_mut = sd_mut_end;
    end
    
    parents=selectionTournament(population,NP,V,M);
    offspring=geneticOperators(parents,NC,P,intervalScalar,sd_mut,V,M,f,lb,ub);
    population = [ population ; offspring ];
    
    if crowdingDistanceFlag == 0
        population = sortPopulation(population,V,M);
        population = cropPopulation(population,N);
    else
        population = sortPopulationCrowding(population,V,M,N);
    end
    
    % Visualization
    if verbose && mod(it,10)==0
<<<<<<< Updated upstream
        top20 = population(:,V+1:end)
=======
        top20 = [unnormalizePopulation(population(:,1:V),lb,ub) , population(:,V+1:end)]
>>>>>>> Stashed changes
        illustratePopulation(population,V,M,lb,ub,it);
        drawnow;
        pause(0.05);
    end
    
    [stopFlag, crowdingDistanceFlag] = stopCriterion(it, population(:,V+M+1),population, V+M+2);%oldPopulationObjectives, population(:,V+1:V+M), notChangingLimit, V, M);
    it=it+1;
end
    
runTime = cputime - startTime;

end
        