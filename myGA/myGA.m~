function [it,population,runTime]=myGA(f,V,M,lb,ub)
% myGA(f,V,M,lb,ub)
% f : function to minimize
% V : Dimension of the search space.
% sM : Number of objectives.
% lb = lower bound vector.
% ub = upper bound vector.

%% Some settings
verbose = 1;
variableParams = 0;

%% DEFINITION OF THE PARAMETERS
% from the sweep: [0.600000000000000,0.810000000000000,32,32,13,1.35000000000000,153.250000000000,1.30124999999975,135,1.17999999999938,273,2.37999999999920]
% manual: 24,12,24,0.8,0.1,1.2

% P sd_mut  sd_rec N   NP   NC 
P=0.49602 ;sd_mut= 0.18563; std_mut_rec=1e-05 ; Nbase=9.4426  ;N=round(Nbase);NP=round(N*0.90519);NC=round(N*1.4767);
%0.89136      0.03533     0.023195       43.322            1        1.988      %0.28953          190
%0.49602      0.18563        1e-05       9.4426      0.90519       1.4767     %0.068889     
% N = 32;         % Population size
% NP = round(N/4);       % Size of the mating pool
% NC = round(N/2);       % Number of children generated by generation
% P = 0.7;
% sd_mut = 0.2;
% sd_mut_rec = 0.05;
intervalScalar = 0.0;  

%P=0.44 | sd_mut:  0.26 | N: 10.00 | NP:  9.00 | NC:  8.00 | interval:  1.35 
P_start = 0.44;
sd_mut_start = 0.26;
N_start = 10; %N = N_start;
NP_start = 9;
NC_start = 32;
intervalScalar_start = 1.35;

P_end = 0.8;
sd_mut_end = 0.05;
N_end = 32;
NP_end = round(0.6294*N_end);
NC_end = round(1.8436*N_end);
intervalScalar_end = 1.35;


%% GENETIC ALGORITHM

% Generation of the intial population
population=initPopulation(N,V,M);
% disp('initialPopulation')
% disp(population)

population=evaluatePopulation(population,f,V,M,lb,ub);
% disp('initialPopulation')
% disp(population)

population=sortPopulation(population,V,M);
% disp('initialPopulation')
% disp(population)

% Main loop
startTime = cputime;

it=1;
stopFlag = 0;
convergedFlag = 0;

while stopFlag==0
    crowdingDistanceFlag = convergedFlag;
    if variableParams
        if convergedFlag == 1
            P = P_end;
            sd_mut = sd_mut_end;
            N = N_end;
            NP = NP_end;
            NC = NC_end;
            intervalScalar = intervalScalar_end;
        else
            P = P_start;
            sd_mut = sd_mut_start;
            N = N_start;
            NP = NP_start;
            NC = NC_start;
            intervalScalar = intervalScalar_start;
        end
    end
    
    % use this to enable/disable variable P and sd_mut.
    % Setting to crowdingDistanceFlag uses first variable, and when everything reached rank 1 fixed
%     fixedPFlag = crowdingDistanceFlag;
%     if fixedPFlag == 0
%         sd_mut = sd_mut_start/it + sd_mut_end;
%         P = P_start/it + P_end;
%     else
%         P = P_end;
%         sd_mut = sd_mut_end;
%     end
    parents= selectionTournament(population,NP,V,M,crowdingDistanceFlag);
    offspring= geneticOperators(parents,NC,P,0,sd_mut,std_mut_rec,V,M,f,lb,ub);
    population = [ population ; offspring ];
    
    [~,uniqueIndividuals,~] = unique(population(:,1:V),'rows','stable');
    population = population(uniqueIndividuals,:);
    
    if convergedFlag == 0
        population = sortPopulation(population,V,M);
        population = cropPopulation(population,N);
    else
        population = sortPopulationCrowding(population,V,M,N);
    end
    
    % Visualization
    if verbose && mod(it,10)==0
        top20 = [unnormalizePopulation(population(:,1:V),lb,ub) , population(:,V+1:end)]
        illustratePopulation(population,V,M,lb,ub,it);
        drawnow;
        pause(0.05);
    end
    
    [stopFlag, convergedFlag] = stopCriterion(it, population(:,V+M+1),population, V+M+2,M);
    it=it+1;
end
    
runTime = cputime - startTime;

end
        