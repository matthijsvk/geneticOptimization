function [it,population,runTime]=myGA(f,V,M,lb,ub)
% myGA(f,V,M,lb,ub)
% f : function to minimize
% V : Dimension of the search space.
% sM : Number of objectives.
% lb = lower bound vector.
% ub = upper bound vector. 

%% DEFINITION OF THE PARAMETERS

N = 32;         % Population size
NP = round(N/2);       % Size of the mating pool
NC = round(N/4);       % Number of children generated by generation
P_start = 0.01;        % probability of recombination
M_start = 1 - P_start;
P_end = 0.7;
sd_mut_start = 10;  % standard deviation of Gaussian for mutation
sd_mut_end = 0.1;
intervalScalar = 1.2;   % scale the parent interval to create more variation 
                        % and not get stuck in local minimum because you always stay in between the parents
verbose=0;

%% GENETIC ALGORITHM

% Generation of the intial population
population=initPopulation(N,V,M);
population=evaluatePopulation(population,f,V,M,lb,ub);
population=sortPopulation(population,V,M);

% preallocate for speed
populationOffspring = zeros(N+NC, V, M); 

% Main loop
startTime = cputime;

it=1;
stopFlag = 0;
crowdingDistanceFlag = 0;
while stopFlag==0
    
    % use this to enable/disable variable P and sd_mut. 
    % Setting to crowdingDistanceFlag uses first variable, and when everything reached rank 1 fixed
    fixedPFlag = 1; %crowdingDistanceFlag;  
    if fixedPFlag == 0
        sd_mut = sd_mut_start/it;
        P = 1 - (M_start/it);
    else
        P = P_end;
        sd_mut = sd_mut_end;
    end
    % For Monte Carlo
    %oldPopulationObjectives = population(:,V+1:V+M);
    
    parents=selectionTournament(population,NP,V,M);
    
    offspring=geneticOperators(parents,NC,P,intervalScalar,sd_mut,V,M,f,lb,ub);
    % new variable to prevent MATLAB from copying the whole array -> faster
    populationOffspring = [ population ; offspring ];

    if crowdingDistanceFlag == 0
        populationOffspring = sortPopulation(populationOffspring,V,M);
        population = cropPopulation(populationOffspring,N);
    else
        population = sortPopulationCrowding(population,V,M,N);
    end
    
    % Visualization
    if verbose && mod(it,10)==0
        top30 = population(:,:)
        illustratePopulation(population,V,M,lb,ub,it);
        drawnow;
        pause(0.1);
    end
    
    [stopFlag, crowdingDistanceFlag] = stopCriterion(it, population(:,V+M+1),population, V+M+2);%oldPopulationObjectives, population(:,V+1:V+M), notChangingLimit, V, M);
    it=it+1;

end
runTime = cputime - startTime;
if verbose
    disp(['Total runTime: ',runTime]);
    disp(['Number of iterations till convergence: ',num2str(it)])
    disp('FinalPopulation')
    disp(population)    
    illustratePopulation(population,V,M,lb,ub,it);
end

end
